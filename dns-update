#!/usr/bin/perl
# vim:set ai noet sts=8 ts=8 sw=8 tw=0:
# Local Variables:
# mode:cperl
# cperl-indent-level:4
# End:

# Copyright Â© Stephen Gran 2009
# Copyright (c) 2010, 2011, 2013, 2014 Peter Palfrader <peter@palfrader.org>
#
# Author: Stephen Gran <steve@lobefin.net>, Peter Palfrader
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, under version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

=head1 NAME

dns-update - update bind config snippet

=head1 SYNOPSIS

dns-update

=head1 DESCRIPTION

We loop over all the zonefiles in the input directory, producing a
suitable B<named.conf> snippet to be included in the bind config.

Lastly bind9 is reloaded.

The default template and contents are defined in the dns-helpers
configfile.  The snippet is configured in the named_snippet value
of the seetings.  The snippet itself, or any blocks it imports, can be
overwritten on a per-zone basis from the zonefile directly, using dnsu blocks.

Example to override what was set in dns-helpers as named_var_also_notify,
and is used in the template as @@ALSO_NOTIFY@@:
    ; dnsu: begin also_notify
    ;   37.247.55.151; // ns2.noreply.org
    ; dnsu: end also_notify

=head1 FILES

=over

=item F</etc/dns-helpers.yaml>

Config file location.

=back


=head1 ENVIRONMENT

=over

=item B<DNSHELPERS_CONF>

Overrides location for the configuration file.

=back


=head1 SEE ALSO

=over

=item F<dns-helpers.yaml.sample>

=item B<write_zonefile>

=item B<git>

=back

=cut


use strict;
use warnings;
use English;
use File::Temp qw(tempfile);
use YAML;

my $conffile = '/etc/dns-helpers.yaml';
$conffile = $ENV{'DNSHELPERS_CONF'} if defined $ENV{'DNSHELPERS_CONF'};

my $config = YAML::LoadFile $conffile;

for my $key (qw{indir outdir postcommand named_snippet}) {
	die ("$key not set in config\n") unless defined $config->{$key};
};

our $INDIR = $config->{'indir'};
our $OUTDIR = $config->{'outdir'};
our @postcommand = @{$config->{'postcommand'}};
our $named_snippet = $config->{'named_snippet'};


sub load_vars {
	my ($zf) = @_;

	my $vars;

	open(INFILE, '<', "$zf") or die "Can't open $zf: $!\n";
	my $lineno = 0;
	my @lines = ();
	while (<INFILE>) {
		$lineno++;
		chomp;

		if (/^; dnsu:\s*begin\s+(.*)\s*$/) {
			my $linenostart = $lineno;
			my $token = $1;
			my $data = '';
			my $proper_end = 0;
			while (<INFILE>) {
				$lineno++;
				if (/^; dnsu:\s*end\s+(.*)\s*$/) {
					$proper_end = 1;
					last;
				};

				s/^; ?//;
				$data .= $_;
			};
			unless ($proper_end) {
				print STDERR "Runaway dnsu begin block for $token, starting in line $linenostart.\n";
				return $vars;
			};
			$vars->{$token} = $data;
		}
		elsif (/^; dnsu:/) {
			print STDERR "Unknown wzf directive in line $lineno: '$_'\n";
		};
	};
	close INFILE;
	return $vars;
};


sub create_named_snippet {
	my ($fn) = @_;

	my $zonename = $fn;
	$zonename =~ s/\@/\//;

	my $snip = $named_snippet;
	my $per_zone_override = load_vars($INDIR.'/'.$fn);

	for my $key (keys %$config) {
		my ($varname) = $key =~ m/^named_var_(\S*)/;
		next unless defined $varname;

		my $data = $config->{$key};
		$data = $per_zone_override->{$varname} if defined $per_zone_override->{$varname};

		my $tmplname = uc($varname);
		$tmplname = quotemeta($tmplname);

		$snip =~ s#\@\@$tmplname\@\@#$data#g;
	};

	$snip =~ s#\@\@ZONEFILE\@\@#$OUTDIR/$fn#g;
	$snip =~ s#\@\@ZONENAME\@\@#$zonename#g;

	return $snip;
}

sub do_update {
	opendir (D, $INDIR) or die "Can't opendir $INDIR: $!\n";
	my @zones = grep { $_ !~ /^\./  && -f "$INDIR/$_" } readdir D;
	closedir D;

	my ($namedfd, $namedfile) = tempfile(DIR => $OUTDIR);
	print $namedfd 'include "/etc/bind/named.conf.extra";'

	# same sort thing as above
	for my $file (sort {length($b) <=> length($a)} @zones) {
		next if $file =~ /^(dsset|keyset)-/;
		my $snip = create_named_snippet($file);

		print $namedfd $snip;
	}

	close $namedfd;
	chmod(0664, $namedfile);
	rename $namedfile, "$OUTDIR/named.conf";
	
	system(@postcommand) == 0 or die "system @postcommand failed: $?\n";
}

umask(0002);
do_update();
