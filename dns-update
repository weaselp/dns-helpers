#!/usr/bin/perl
# vim:set ai noet sts=8 ts=8 sw=8 tw=0:
# Local Variables:
# mode:cperl
# cperl-indent-level:4
# End:

# Copyright Â© Stephen Gran 2009
# Copyright (c) 2010 Peter Palfrader <peter@palfrader.org>
#
# Author: Stephen Gran <steve@lobefin.net>, Peter Palfrader
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, under version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

=head1 NAME

dns-update - update zonefiles changed in recent git commit

=head1 SYNOPSIS

dns-update

=head1 DESCRIPTION

B<dns-update> is intended to be called from a git F<post-receive> hook.  It
receives the arguments through stdin, like the hook itself, so if more items
in the hook require that information it needs to be cloned first.

It then calls B<git diff> on the revision pairs, learning which files where
touched in this commit.

Next it updates the git working copy in the input directory.

We then call B<write_zonefile> to create a useable zone file for for all
regular files learned in the git diff step above, excluding symlinks or
directories or the like, that are in the root directory of the git repository

Afterwards we loop over all the zonefiles in the input directory, producing a
suitable B<named.conf> snippet to be included in the bind config.  Any zones
that for some reason are not present in the output directory already are
created at this step also.

Lastly bind9 is reloaded.

=head1 FILES

=over

=item F</etc/dns-helpers.yaml>

Config file location.

=back


=head1 ENVIRONMENT

=over

=item B<GIT_DIR>

Location of the "parent" git repository, used by git during the git-diff phase.

=item B<DNSHELPERS_CONF>

Overrides location for the configuration file.

=back


=head1 SEE ALSO

=over

=item F<dns-helpers.yaml.sample>

=item B<write_zonefile>

=item B<git>

=back

=cut


use strict;
use warnings;
use English;
use File::Temp qw(tempfile);
use YAML;

my $conffile = '/etc/dns-helpers.yaml';
$conffile = $ENV{'DNSHELPERS_CONF'} if defined $ENV{'DNSHELPERS_CONF'};

my $config = YAML::LoadFile $conffile;

for my $key (qw{indir outdir postcommand updatecommand named_snippet}) {
	die ("$key not set in config\n") unless defined $config->{$key};
};

our $INDIR = $config->{'indir'};
our $OUTDIR = $config->{'outdir'};
our @postcommand = @{$config->{'postcommand'}};
our $update_command = $config->{'updatecommand'};
our $named_snippet = $config->{'named_snippet'};


sub check_files {
	my @cmd = qw(git diff --name-only);
	push @cmd, (join '..', @_);
	open(FILES, '-|', @cmd) or die "git log failed? $!\n";
	my @files = (<FILES>);
	close FILES or die "git log exited non-zero? $!\n";
	chomp(@files);
	return @files;
}

sub do_update {
	my @changes = @_;
	delete $ENV{'GIT_DIR'};
	chdir $INDIR or die "chdir $INDIR failed? $!\n";
	my @cmd = qw(git pull);
	system(@cmd) == 0 or die "system @cmd failed: $?\n";
	
	for my $file (@changes)  {
		next if ( -l "$INDIR/$file" ); # ignore symlinks
		next if ( $file =~ m#/# ); # ignore files not in the repository's /
		next unless ( -f "$INDIR/$file" );
		print "Updating $file ...\n";
		system($update_command, $file);
		warn("$update_command $file returned non-zero exit status ".($CHILD_ERROR >> 8).".\n") if ($CHILD_ERROR >> 8 != 0);
		print "done.\n";
	}

	opendir (D, $INDIR) or die "Can't opendir $INDIR: $!\n";
	my @zones = grep { $_ !~ /^\./  && -f "$INDIR/$_" } readdir D;
	closedir D;

	my ($zonefd, $zonefile) = tempfile(DIR => $OUTDIR);

	for my $file (@zones) {
		next if $file =~ /^(dsset|keyset)-/;

		my $zonename = $file;
		$zonename =~ s/\@/\//;
		my $snip = $named_snippet;
		$snip =~ s#\@\@ZONEFILE\@\@#$OUTDIR/$file#g;
		$snip =~ s#\@\@ZONENAME\@\@#$zonename#g;
		print $zonefd $snip;
		unless (-f "$OUTDIR/$file") {
			print "Updating $file (missing) ...\n";
			system($update_command, $file);
			warn("$update_command $file returned non-zero exit status ".($CHILD_ERROR >> 8).".\n") if ($CHILD_ERROR >> 8 != 0);
			print "done.\n";
		}
	}

	close $zonefd;
	chmod(0664, $zonefile);
	rename $zonefile, "$OUTDIR/named.conf";
	
	system(@postcommand) == 0 or die "system @postcommand failed: $?\n";
}

umask(0002);
for my $key (keys %ENV) {
	next if ($key eq 'GIT_DIR');
	delete $ENV{$key};
}
$ENV{'PATH'} = '/bin:/usr/bin:/sbin:/usr/sbin';

my @files;

while (<>) {
	my ($oldrev, $newrev, $refname) = split;
	push @files, (check_files($newrev, $oldrev));
}

my %files;
for my $file (@files) {
	$files{$file}++;
}

do_update(keys %files);
