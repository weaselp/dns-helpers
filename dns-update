#!/usr/bin/perl
# vim:set ai noet sts=8 ts=8 sw=8 tw=0:
# Local Variables:
# mode:cperl
# cperl-indent-level:4
# End:

# Copyright Â© Stephen Gran 2009
#
# Author: Stephen Gran <steve@lobefin.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, under version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

use strict;
use warnings;
use English;
use File::Temp qw(tempfile);

our $INDIR = '/var/cache/bind/git/domains';
our $OUTDIR = '/var/cache/bind/generated/';
our @postcommand = qw(sudo /etc/init.d/bind9 reload);
our $update_command = '/git/HOOKS/write_zonefile';

sub check_files {
	my @cmd = qw(git diff --name-only);
	push @cmd, (join '..', @_);
	open(FILES, '-|', @cmd) or die "git log failed? $!\n";
	my @files = (<FILES>);
	close FILES or die "git log exited non-zero? $!\n";
	chomp(@files);
	return @files;
}

sub do_update {
	my @changes = @_;
	delete $ENV{'GIT_DIR'};
	chdir $INDIR or die "chdir $INDIR failed? $!\n";
	my @cmd = qw(git pull);
	system(@cmd) == 0 or die "system @cmd failed: $?\n";
	
	for my $file (@changes)  {
		next if ( -l "$INDIR/$file" ); # ignore symlinks
		next if ( $file =~ m#/# ); # ignore files not in the repository's /
		next unless ( -f "$INDIR/$file" );
		print "Updating $file ...\n";
		system($update_command, $file);
		warn("$update_command $file returned non-zero exit status ".($CHILD_ERROR >> 8).".\n") if ($CHILD_ERROR >> 8 != 0);
		print "done.\n";
	}

	opendir (D, $INDIR) or die "Can't opendir $INDIR: $!\n";
	my @zones = grep { $_ !~ /^\./  && -f "$INDIR/$_" } readdir D;
	closedir D;

	my ($zonefd, $zonefile) = tempfile(DIR => $OUTDIR);

	for my $file (@zones) {
		my $zonename = $file; 
		$zonename =~ s/\@/\//;
		print $zonefd <<EOF;
zone "$zonename" {
	type master;
	file "generated/$file";
	allow-query { any; };
	allow-transfer {
		key draghi.debian.org-klecker.debian.org. ;
		key draghi.debian.org-raff.debian.org. ;
		key draghi.debian.org-rietz.debian.org. ;
		key draghi.debian.org-senfl.debian.org. ;
		key draghi.debian.org-ravel.debian.org. ;
		key draghi.debian.org-orff.debian.org. ;
	};
	also-notify {
		128.31.0.51; // senfl
		192.25.206.59; // raff
		2001:648:2ffc:deb:213:72ff:fe69:e188; // orff
	};
};

EOF
		unless (-f "$OUTDIR/$file") {
			print "Updating $file (missing) ...\n";
			system($update_command, $file);
			warn("$update_command $file returned non-zero exit status ".($CHILD_ERROR >> 8).".\n") if ($CHILD_ERROR >> 8 != 0);
			print "done.\n";
		}
	}

	close $zonefd;
	chmod(0664, $zonefile);
	rename $zonefile, "$OUTDIR/named.conf";
	
	system(@postcommand) == 0 or die "system @postcommand failed: $?\n";
}

umask(0002);
for my $key (keys %ENV) {
	next if ($key eq 'GIT_DIR');
	delete $ENV{$key};
}
$ENV{'PATH'} = '/bin:/usr/bin:/sbin:/usr/sbin';

my @files;

while (<>) {
	my ($oldrev, $newrev, $refname) = split;
	push @files, (check_files($newrev, $oldrev));
}

my %files;
for my $file (@files) {
	$files{$file}++;
}

do_update(keys %files);

