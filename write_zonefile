#!/usr/bin/perl
# vim:set ai noet sts=8 ts=8 sw=8 tw=0:
# Local Variables:
# mode:cperl
# cperl-indent-level:4
# End:

# Copyright Â© Stephen Gran 2009
# Copyright (c) 2010, 2013, 2014 Peter Palfrader <peter@palfrader.org>
#
# Author: Stephen Gran <steve@lobefin.net>, Peter Palfrader
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, under version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


=head1 NAME

write_zonefile - Add SOA to a zonefile


=head1 SYNOPSIS

write_zonefile [options] <zonename>


=head1 DESCRIPTION

Reads a (partial) zonefile from I<INDIR>/I<zonename> and writes a complete
zonefile to I<OUTDIR>/I<zonename>.

Unless DNSSEC is enabled for a zone, the only processing this script does is
adding a $TTL default line at the top, and then adding a SOA before including
the input zone in verbatim.

The script keeps some state in I<OUTDIR>/I<zonename>B<.serial> about which
serial number to put in the SOA.  It makes strictly incrementing serials, of
the I<yyyymmddNN> style (overflowing to the next day if it runs out of numbers
for a day).

If B<named-checkzone> likes the new zonefile this scripts exits with 0 exit
code and the new zonefile in the output directory.  Otherwise it exits with a
non-zero code and without modifying the zonefile in the output directory.

=head1 OPTIONS

=item B<--force-update>

Update the zonefile and its serial even if no data has changed.

=item B<--keep-zonefile-on-errors>

If named-checkzone fails a zonefile, keep the file around anyway.  Prints its
filename.

=item B<--skip-zonecheck>

Do not run zonecheck on zone prior to compiling it.  (Note that compile runs most
checks also, so this isn't too useful anymore.)  Can be set per-zone in the zonefile
itself using B<; wzf: skip-zonecheck = 1> on a line by itself.

=item B<--no-integrity-checks>

Do not require integrity checks to pass (i.e. targets of MX records need not
have A records etc.) - see B<named-checkzone>(8) for details.
Can be set per-zone in the zonefile itself using
B<; wzf: no-integrity-checks = 1> on a line by itself.

=head1 CONFIGURATION OPTIONS

The configuration file specifies a number of options, including SOA values.
See B<dns-helpers.yaml.sample> for an example.  Some of these options
can be overriden on a per-zone basis by having lines of the form
C<wzf: I<key> = I<value>> in your input zonefile.  Valid keys include
B<soa_>{B<origin>,B<hostmaster>,B<refresh>,B<retry>,B<expire>,B<negttl>},
and B<default_ttl>.


=head1 FILES

=over

=item F</etc/dns-helpers.yaml>

Config file location.

=back


=head1 ENVIRONMENT

=over

=item B<DNSHELPERS_CONF>

Overrides location for the configuration file.

=back


=head1 SEE ALSO

=over

=item F<dns-helpers.yaml.sample>

=item B<named-checkzone>

=item B<dns-update>

=item B<maintkeydb>

=back

=cut

use strict;
use warnings;
use POSIX qw(strftime);
use File::Temp qw(tempfile);
use English;
use YAML;
use Getopt::Long;
use File::Compare;

use FindBin;
use lib $FindBin::Bin;
use DSA::DNSHelpers;

my $config = load_config(qw{indir outdir default_ttl soa});

our $INDIR = $config->{'indir'};
our $OUTDIR = $config->{'outdir'};
our $DEFAULT_TTL = $config->{'default_ttl'};
our $SOA = $config->{'soa'};

sub write_zonefile {
	my ($zonename, $serial, $lines, $params) = @_;

	my ($fd, $tmpzonefilename) = tempfile("$zonename.assemble-XXXXXX", DIR => $OUTDIR, SUFFIX => '.tmp');

	print $fd generate_zoneheader($serial, ttl => $DEFAULT_TTL, %$SOA);
	for (@$lines) {
		print $fd $_;
	};
	close $fd;
	chmod(0664, $tmpzonefilename);

	if (!($params->{'skip-zonecheck'} || check_zonefile($zonename, $tmpzonefilename, %$params))) {
		if ($params->{'keep-zonefile-on-errors'}) {
			warn("zonefile is at $tmpzonefilename\n");
		} else {
			unlink $tmpzonefilename;
		};
		die("ERROR: checkzone returned errors on zone $zonename - not updated.\n");
	}

	my ($fd2, $tmpcompiledzonefilename) = tempfile("$zonename.compiled-XXXXXX", DIR => $OUTDIR, SUFFIX => '.tmp');
	if (!compile_zonefile($zonename, $tmpzonefilename, $tmpcompiledzonefilename)) {
		unlink $tmpzonefilename;
		unlink $tmpcompiledzonefilename;
		die("ERROR: compilezone returned errors on zone $zonename - not updated.\n");
	}
	unlink $tmpzonefilename;
	(chmod(0644, $tmpcompiledzonefilename) == 1) or die ("Failed to chmod zone: $!\n");

	return $tmpcompiledzonefilename;
}




chdir($INDIR) || die ("Cannot chdir to $INDIR: $!\n");

my $USAGE = "Usage: $PROGRAM_NAME [--help] | [--force-update] [--keep-zonefile-on-errors] <zone>\n";
my $params;
Getopt::Long::config('bundling');
GetOptions (
	'--help' => \$params->{'help'},
	'--force-update' => \$params->{'force-update'},
	'--skip-zonecheck' => \$params->{'skip-zonecheck'},
	'--no-integrity-checks' => \$params->{'no-integrity-checks'},
	'--keep-zonefile-on-errors' => \$params->{'keep-zonefile-on-errors'},
) or die ($USAGE);
if ($params->{'help'}) {
	print $USAGE;
	exit(0);
};

my $zonename = shift @ARGV;
die $USAGE if (scalar @ARGV > 0);

die "Usage: $0 <zonename>\n" unless defined $zonename && length($zonename);

open(INFILE, '<', "$INDIR/$zonename") or die "Can't open $INDIR/$zonename: $!\n";
my $lineno = 0;
my @lines = ();
while (<INFILE>) {
	$lineno++;
	push @lines, $_;
	chomp;

	if (/^; wzf:\s*soa_(origin|hostmaster|refresh|retry|expire|negttl)\s*=\s*(\S*)\s*$/) { $SOA->{$1} = $2 }
	elsif (/^; wzf:\s*default_ttl\s*=\s*(\S*)\s*$/) { $DEFAULT_TTL = $1 }
	elsif (/^; wzf:\s*skip[-_]zonecheck\s*=\s*1\s*$/) { $params->{'skip-zonecheck'} = 1 }
	elsif (/^; wzf:\s*no-integrity-checks\s*=\s*1\s*$/) { $params->{'no-integrity-checks'} = 1 }
	elsif (/^; wzf:\s*dnssec\s*=\s*(\S*)\s*$/) { 1; } # nothing
	elsif (/^; wzf:/) {
		print STDERR "Unknown wzf directive in line $lineno: '$_'\n";
	};
};
close INFILE;

my $targetfilename = "$OUTDIR/$zonename";

unless ($params->{'force-update'}) {
	my $serial = get_serial($zonename, $OUTDIR);
	if (defined $serial) {
		my $tmpzonefilename = write_zonefile($zonename, $serial, \@lines, $params);

		my $no_change = compare($tmpzonefilename, $targetfilename) == 0;
		unlink($tmpzonefilename);
		exit 0 if $no_change;
	}
}

my $serial = new_serial($zonename, $OUTDIR);
my $tmpzonefilename = write_zonefile($zonename, $serial, \@lines, $params);

rename($tmpzonefilename, $targetfilename) or die ("Failed to rename zone to target name: $!\n");
